<?php

/**
 * OS2Forms Server Communication
 * PHP version 5
 * @category OS2Forms
 * @package  OS2Forms
 * @file     Code for OS2Forms Server Communication
 * @author   Juulia Devadze <juulia@bellcom.ee>, Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
module_load_include('inc', 'os2forms_server_communication', 'inc/os2forms_server_communication');
module_load_include('inc', 'os2forms_server_communication', 'inc/os2forms_server_communication.remote');

/**
 * Implementation of hook_menu()
 * @return list of links
 */
function os2forms_server_communication_menu() {
  $items = array();
  $items['admin/config/os2forms_server_communication'] = array(
    'title' => 'OS2Forms server communication setup',
    'description' => 'Set up OS2Form Frontend servires',
    'position' => 'right',
    'weight' => -15,
    'access arguments' => array('administer users'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/os2forms_server_communication/settings'] = array(
    'title' => 'OS2Forms server communication configuration',
    'description' => 'Set up OS2FROM frontend servers',
    'access arguments' => array('access administration pages'),
    'page callback' => 'os2forms_server_communication_settings_page',
    'file' => 'os2forms_server_communication.admin.inc'
  );
  $items['admin/config/os2forms_server_communication/server/add'] = array(
    'title' => 'New Server',
    'description' => 'Add new server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2forms_server_communication_add_server_form'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
    'file' => 'os2forms_server_communication.admin.inc'
  );

  $items['admin/config/os2forms_server_communication/server/%/edit'] = array(
    'title' => 'Edit Server',
    'page callback' => 'os2forms_server_communication_edit_server_page',
    'type' => MENU_CALLBACK,
    'page arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2forms_server_communication_edit_server_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'os2forms_server_communication.admin.inc'
  );
  $items['admin/config/os2forms_server_communication/server/%/delete'] = array(
    'title' => 'Delete server',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2forms_server_communication_delete_server_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'os2forms_server_communication.admin.inc',
  );

  $items['os2forms_server_communication/testcron'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'os2forms_server_communication_sync_submissions',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/os2forms_server_communication/submissions/clear'] = array(
    'title' => 'Delete server',
    'type' => MENU_CALLBACK,
    'page arguments' => array('os2forms_server_communication_clear_submissions_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('access administration pages'),
    'file' => 'os2forms_server_communication.admin.inc',
  );

  return $items;
}

function os2forms_server_communication_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('os2forms_server_communication_cron' => t("Copied submission from frontend servers"));
  }
}

/**
 * Implementation of hook_cron().
 * Fires all imports.
 * @return none
 */
function os2forms_server_communication_cron() {
  os2forms_server_communication_sync_submissions();
  os2forms_server_communication_clear_submissions();
}

function os2forms_server_communication_sync_submissions() {
  //synching remote servers
  $servers = os2forms_server_communication_get_servers();
  foreach ($servers as $server) {
    watchdog('OS2forms', '[Server: %server] Synching session started', array('%server' => $server->server_name), WATCHDOG_DEBUG);
    $last_synched = os2forms_server_communication_last_synched($server->id);

    $webforms = os2forms_server_communication_get_webforms();

    foreach ($webforms as $webform) {
      watchdog('OS2forms', '[Server: %server] [Form: %title] Synching form submissions', array(
        '%title' => $webform->title,
        '%server' => $server->server_name
      ), WATCHDOG_DEBUG);
      $cleared_frontend_submission_data['webform_submission'] = _os2forms_server_communication_prepare_submission($webform->nid);

      try {
        $submissions = os2forms_server_communication_remote_get_submissions($webform->title, $server);
        if ($submissions === FALSE) {
          watchdog('OS2forms', '[Server: %server] [Form: %title] Skipping form. Form not found on remote server', array(
            '%title' => $webform->title,
            '%server' => $server->server_name
          ), WATCHDOG_DEBUG);
          continue;
        }

        foreach ($submissions as $submission) {
          if (isset($last_synched) && $last_synched >= $submission->submitted) {
            continue;
          }

          $new_submission_data = os2forms_server_communication_remote_get_submission_data($server, $submission);
          $submission_id = os2forms_server_communication_create_submission($webform->nid, $new_submission_data);
          $cleared_frontend_submission_data['webform_submission']['submission_id'] = $submission_id;

          os2forms_server_communication_remote_update_submission($server, $submission, $cleared_frontend_submission_data);

          watchdog('OS2forms', '[Server: %server] [Form: %title] Submission data cleared, added token', array(
            '%title' => $webform->title,
            '%server' => $server->server_name,
            '%token' => $submission_id
          ), WATCHDOG_DEBUG);
        }
      } catch (Exception $e) {
        watchdog('OS2forms', '[Server: %server] [Form: %title] Request %uri failed with message: %message', array(
          '%title' => $webform->title,
          '%server' => $server->server_name,
          '%message' => $e->getMessage()
        ), WATCHDOG_WARNING);
        continue;
      }
    }

    //saving submission time
    if (!empty($last_synched)) {
      db_update('os2forms_server_communication_submission_update')
        ->fields(array(
          'updated' => time(),
        ))
        ->condition('frontend_server_id', $server->id, '=')
        ->execute();
    }
    else {
      db_insert('os2forms_server_communication_submission_update')
        ->fields(array(
          'frontend_server_id' => $server->id,
          'updated' => time(),
        ))
        ->execute();
    }

    watchdog('OS2forms', '[Server: %server] Synching session completed', array('%server' => $server->server_name), WATCHDOG_DEBUG);
  }
}

/*
 * Job to clear all submissions scheduled to be cleared.
 */
function os2forms_server_communication_clear_submissions() {
  // Select submission for clearing.
  $query = db_select('os2forms_server_communication_submissions_clearing_queue', 'o');
  $query->fields('o', array('nid', 'sid', 'submission_id'))
    ->condition('cleared', 0);
  $result = $query->execute();

  while ($record = $result->fetchAssoc()) {
    os2forms_server_communication_clear_submission($record['nid'], $record['sid'], $record['submission_id']);

    // Updating database entry.
    db_update('os2forms_server_communication_submissions_clearing_queue')
      ->fields(array(
        'cleared' => 1,
        'updated' => time(),
      ))
      ->condition('nid', $record['nid'])
      ->condition('sid', $record['sid'])
      ->execute();
  }
}
